const fs = require("fs").promises;
const path = require("path");

const prdTemplate = `<!--
FRONT MATTER - Propri√©t√©s synchronis√©es avec Notion
====================================================
application: Service | Frontend | Backend
status: Draft | Review | Validated | Obsolete
description: Description courte du projet
-->
---
application: Service
status: Draft
description: "Application de synchronisation entre comptes Grand Shooting avec monitoring"
---

# Project Requirement Description (PRD)
## Application de Synchronisation Grand Shooting

### üìã Informations G√©n√©rales
- **Nom du projet** : GS Sync Connect Catalog
- **Date de cr√©ation** : ${new Date().toLocaleDateString("fr-FR")}
- **Responsable produit** : [√Ä compl√©ter]
- **√âquipe technique** : [√Ä compl√©ter]

### üéØ Objectif du Projet
D√©velopper une application de synchronisation bidirectionnelle des donn√©es entre deux comptes Grand Shooting via API, avec interface de gestion et monitoring.

### üìñ Description D√©taill√©e
Cette application permettra de :
- Configurer des synchronisations entre diff√©rents comptes Grand Shooting
- Synchroniser les donn√©es via API de mani√®re automatis√©e
- Monitorer les volumes de donn√©es synchronis√©es quotidiennement
- G√©rer les erreurs et conflits de synchronisation

### üîß Fonctionnalit√©s Principales

#### Interface de Configuration
- [ ] Connexion aux comptes Grand Shooting (authentification API)
- [ ] Configuration des r√®gles de synchronisation
- [ ] Mapping des champs entre les deux comptes
- [ ] Planification des synchronisations (fr√©quence, horaires)

#### Moteur de Synchronisation
- [ ] Synchronisation bidirectionnelle des donn√©es
- [ ] Gestion des conflits de donn√©es
- [ ] Syst√®me de retry en cas d'√©chec
- [ ] Logs d√©taill√©s des op√©rations

#### Dashboard de Monitoring
- [ ] Vue d'ensemble des synchronisations actives
- [ ] Statistiques des volumes de donn√©es par jour
- [ ] Alertes en cas d'erreur
- [ ] Historique des synchronisations

### üèóÔ∏è Architecture Technique

#### Frontend
- **Framework** : React avec TypeScript
- **UI Library** : Material-UI ou Chakra UI
- **Charts/Graphs** : Chart.js ou Recharts pour les statistiques

#### Backend
- **API Framework** : Node.js avec Express
- **Base de donn√©es** : PostgreSQL pour configs et MongoDB pour logs
- **Queue System** : Redis + Bull pour g√©rer les synchronisations

#### Int√©grations
- **Grand Shooting API** : Documentation et endpoints √† analyser
- **Syst√®me de notifications** : Email via SendGrid + Slack webhooks

### üìä Sp√©cifications des Donn√©es

#### Types de Donn√©es √† Synchroniser
- [ ] Utilisateurs/Contacts
- [ ] Projets/Campaigns
- [ ] M√©dias/Assets
- [ ] M√©tadonn√©es personnalis√©es
- [ ] Configurations de compte

#### Volume Estim√©
- **Nombre d'enregistrements** : 10,000 - 100,000 par compte
- **Fr√©quence de synchronisation** : Temps r√©el + batch quotidien
- **Taille moyenne par enregistrement** : 2-5 KB

### üîÑ Flux de Synchronisation

1. **Configuration initiale**
   - Connexion aux deux comptes via OAuth
   - Mapping automatique et manuel des champs
   - D√©finition des r√®gles de transformation

2. **Synchronisation en temps r√©el**
   - Webhooks pour les modifications
   - Queue de traitement asynchrone
   - Validation et transformation des donn√©es

3. **Synchronisation batch**
   - R√©cup√©ration des donn√©es modifi√©es (delta)
   - Application des r√®gles de transformation
   - Envoi vers le compte cible avec retry

4. **Monitoring et reporting**
   - Logging d√©taill√© des op√©rations
   - Calcul des m√©triques en temps r√©el
   - G√©n√©ration de rapports quotidiens

### üõ°Ô∏è S√©curit√© et Conformit√©
- [ ] Chiffrement des tokens API (AES-256)
- [ ] Audit trail complet des modifications
- [ ] Gestion des permissions utilisateurs (RBAC)
- [ ] Backup automatique des configurations
- [ ] Conformit√© RGPD pour les donn√©es personnelles

### üìÖ Planning et Milestones

#### Phase 1 : Foundation (Semaine 1-2)
- [ ] Architecture technique et choix technologiques
- [ ] Configuration projet et environnements
- [ ] Int√©gration API Grand Shooting (analyse + tests)
- [ ] Interface de connexion et authentification

#### Phase 2 : Core Features (Semaine 3-4)
- [ ] Moteur de synchronisation basique
- [ ] Interface de configuration des mappings
- [ ] Syst√®me de logs et audit trail
- [ ] Tests unitaires et d'int√©gration

#### Phase 3 : Advanced Features (Semaine 5-6)
- [ ] Dashboard de monitoring avec m√©triques
- [ ] Gestion avanc√©e des conflits
- [ ] Syst√®me d'alertes et notifications
- [ ] API REST pour l'administration

#### Phase 4 : Production (Semaine 7-8)
- [ ] Tests de charge et performance
- [ ] Documentation compl√®te (utilisateur + technique)
- [ ] Configuration de production et CI/CD
- [ ] Formation utilisateurs et go-live

### üß™ Crit√®res d'Acceptation
- [ ] Synchronisation r√©ussie entre deux comptes test (99.9% fiabilit√©)
- [ ] Interface utilisateur intuitive (score UX > 4/5)
- [ ] Monitoring en temps r√©el fonctionnel (latence < 1s)
- [ ] Gestion d'erreurs robuste (auto-recovery > 95%)
- [ ] Performance acceptable (< 5s pour sync standard, < 30s pour batch)

### üìà M√©triques de Succ√®s
- **Fiabilit√©** : 99.9% de synchronisations r√©ussies
- **Performance** : Traitement de 1000 enregistrements/minute
- **Adoption** : 90% des utilisateurs configurent une sync en < 10 min
- **Satisfaction** : Score NPS > 50

### üìö Ressources et Documentation
- [ ] Documentation API Grand Shooting
- [ ] Guide utilisateur avec captures d'√©cran
- [ ] Documentation technique (architecture + d√©ploiement)
- [ ] Runbook de maintenance et troubleshooting
- [ ] Formation vid√©o pour les utilisateurs finaux

### üîó Liens Utiles
- **Repository** : https://github.com/grandshooting/gs-sync-connect-catalog
- **Notion Workspace** : https://notion.so/grandshooting/
- **Documentation API** : [URL API Grand Shooting]
- **Environnement de test** : [URL √† configurer]
- **Monitoring** : [URL dashboard de monitoring]

---
*Ce document est synchronis√© automatiquement avec Notion et sera mis √† jour r√©guli√®rement pendant le d√©veloppement du projet.*`;

async function initPRD() {
  try {
    const prdPath = path.join(__dirname, "../PRD.md");
    await fs.writeFile(prdPath, prdTemplate, "utf8");
    console.log("‚úÖ Fichier PRD.md cr√©√© avec succ√®s !");
    console.log(
      "üìù Vous pouvez maintenant le modifier et le synchroniser avec Notion",
    );
    console.log("üöÄ Commandes disponibles :");
    console.log("   npm run sync-to-notion   # Envoyer vers Notion");
    console.log("   npm run sync-from-notion # R√©cup√©rer depuis Notion");
  } catch (error) {
    console.error("‚ùå Erreur lors de la cr√©ation du PRD:", error.message);
  }
}

if (require.main === module) {
  initPRD();
}

module.exports = { initPRD };
